{"version":3,"sources":["css.js","file.js","url.js","index.js"],"names":["_","require","css","options","cssOptions","loaders","loader","omit","styleLoader","unshift","context","util","addLoader","Object","assign","test","use","match","cssModules","defaultCssOptions","modules","importLoaders","localIdentName","String","process","env","NODE_ENV","module","exports","file","Error","url"],"mappings":";AAAA,MAAMA,EAAIC,QAAQ,UAWlB,SAASC,EAAIC,EAAU,IACfC,MACAC,EAAU,CAAC,CAAEC,OAAQ,aAAcH,QADtBH,EAAEO,KAAKJ,EAAS,CAAC,kBAU7B,OAPqB,IAAxBA,EAAQK,aACVH,EAAQI,QAAQ,CACdH,OAAQ,eACRH,QAASA,EAAQK,aAAe,KAI7B,CAACE,EAASC,IACfA,EAAKC,UACHC,OAAOC,OACL,CACEC,KAAM,SACNC,IAAKX,GAEPK,EAAQO,QAahB,SAASC,EAAWf,EAAU,IACtBgB,MAAAA,EAAoB,CACxBC,SAAS,EACTC,cAAe,EACfC,eACmC,eAAjCC,OAAOC,QAAQC,IAAIC,UACf,mBACA,oCAMFrB,EAAU,CAAC,CAAEC,OAAQ,aAAcH,QAJtBU,OAAOC,OACxBK,EACAnB,EAAEO,KAAKJ,EAAS,CAAC,UAAW,UAAW,mBAWlC,OAPqB,IAAxBA,EAAQK,aACVH,EAAQI,QAAQ,CACdH,OAAQ,eACRH,QAASA,EAAQK,aAAe,KAI7B,CAACE,EAASC,IACfA,EAAKC,UACHC,OAAOC,OACL,CACEC,KAAM,SACNC,IAAKX,GAEPK,EAAQO,QArEhBU,OAAOC,QAAU1B,EACjByB,OAAOC,QAAQR,QAAUF;;ACIzB,SAASW,EAAK1B,EAAU,IACf,MAAA,CAACO,EAASC,KACX,IAACD,EAAQO,MACL,MAAA,IAAIa,MACP,gIAKEnB,OAAAA,EAAKC,UACVC,OAAOC,OACL,CACEE,IAAK,CAAC,CAAEV,OAAQ,cAAeH,QAAAA,KAEjCO,EAAQO,SArBhBU,OAAOC,QAAUC;;ACOjB,SAASE,EAAI5B,EAAU,IACd,MAAA,CAACO,EAASC,KACX,IAACD,EAAQO,MACL,MAAA,IAAIa,MACP,8HAKEnB,OAAAA,EAAKC,UACVC,OAAOC,OACL,CACEE,IAAK,CAAC,CAAEV,OAAQ,aAAcH,QAAAA,KAEhCO,EAAQO,SArBhBU,OAAOC,QAAUG;;ACAjB,MAAM7B,EAAMD,QAAQ,YACd4B,EAAO5B,QAAQ,aACf8B,EAAM9B,QAAQ,YAEpB0B,OAAOC,QAAU,CACf1B,IAAAA,EACA2B,KAAAA,EACAE,IAAAA","file":"index.js","sourceRoot":"../lib","sourcesContent":["const _ = require(\"lodash\");\n\nmodule.exports = css;\nmodule.exports.modules = cssModules;\n\n/**\n * @param {object} [options]    You can pass all css-loader options.\n * @param {object} [options.styleLoader]    style-loader options. If set to 'false' the 'style-loader' won't be added.\n * @return {Function}\n * @see https://github.com/webpack-contrib/css-loader\n */\nfunction css(options = {}) {\n  const cssOptions = _.omit(options, [\"styleLoader\"]);\n  const loaders = [{ loader: \"css-loader\", options: cssOptions }];\n\n  if (options.styleLoader !== false) {\n    loaders.unshift({\n      loader: \"style-loader\",\n      options: options.styleLoader || {}\n    });\n  }\n\n  return (context, util) =>\n    util.addLoader(\n      Object.assign(\n        {\n          test: /\\.css$/,\n          use: loaders\n        },\n        context.match\n      )\n    );\n}\n\n/**\n * @param {object} [options] You can pass all css-loader options.\n * @param {number} [options.importLoaders]    Defaults to 1.\n * @param {string} [options.localIdentName]   Defaults to '[hash:base64:10]' in production, '[name]--[local]--[hash:base64:5]' in development.\n * @param {object} [options.styleLoader]      style-loader options. If set to 'false' the 'style-loader' won't be added.\n * @return {Function}\n * @see https://github.com/webpack-contrib/css-loader\n */\nfunction cssModules(options = {}) {\n  const defaultCssOptions = {\n    modules: true,\n    importLoaders: 1,\n    localIdentName:\n      String(process.env.NODE_ENV) === \"production\"\n        ? \"[hash:base64:10]\"\n        : \"[name]--[local]--[hash:base64:5]\"\n  };\n  const cssOptions = Object.assign(\n    defaultCssOptions,\n    _.omit(options, [\"exclude\", \"include\", \"styleLoader\"])\n  );\n  const loaders = [{ loader: \"css-loader\", options: cssOptions }];\n\n  if (options.styleLoader !== false) {\n    loaders.unshift({\n      loader: \"style-loader\",\n      options: options.styleLoader || {}\n    });\n  }\n\n  return (context, util) =>\n    util.addLoader(\n      Object.assign(\n        {\n          test: /\\.css$/,\n          use: loaders\n        },\n        context.match\n      )\n    );\n}\n","module.exports = file\n\n/**\n * @param {object} [options] You can pass all file-loader options.\n * @return {Function}\n * @see https://github.com/webpack-contrib/file-loader\n */\nfunction file(options = {}) {\n  return (context, util) => {\n    if (!context.match) {\n      throw new Error(\n        `The file() block can only be used in combination with match(). ` +\n          `Use match() to state on which files to apply the file loader.`\n      )\n    }\n\n    return util.addLoader(\n      Object.assign(\n        {\n          use: [{ loader: 'file-loader', options }]\n        },\n        context.match\n      )\n    )\n  }\n}\n","module.exports = url\n\n/**\n * @param {object} [options] You can pass all url-loader options.\n * @return {Function}\n * @see https://github.com/webpack-contrib/url-loader\n */\nfunction url(options = {}) {\n  return (context, util) => {\n    if (!context.match) {\n      throw new Error(\n        `The url() block can only be used in combination with match(). ` +\n          `Use match() to state on which files to apply the url loader.`\n      )\n    }\n\n    return util.addLoader(\n      Object.assign(\n        {\n          use: [{ loader: 'url-loader', options }]\n        },\n        context.match\n      )\n    )\n  }\n}\n","const css = require(\"./css.js\");\nconst file = require(\"./file.js\");\nconst url = require(\"./url.js\");\n\nmodule.exports = {\n  css,\n  file,\n  url\n};\n"]}